// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 16.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MyCodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Setup Fueling Point Device Name
        /// </summary>
        public void DeviceName()
        {
            #region Variable Declarations
            WinControl uIItemImage = this.UIBinWindow.UIItemWindow.UINMCexeListItem.UIItemImage;
            WinMenuItem uIFileMenuItem = this.UIIXGatewayDefaultLocaWindow.UIPlugInHostMenuBar.UIFileMenuItem;
            WinMenuItem uIDevicesMenuItem = this.UIIXGatewayDefaultLocaWindow.UIPlugInHostMenuBar.UIAreaMenuItem.UIISenseMenuItem.UISetupMenuItem.UIDevicesMenuItem;
            WinButton uINewButton = this.UIIXGatewayDefaultLocaWindow.UIDeviceSetupWindow.UINewWindow.UINewButton;
            WinEdit uIDeviceNameEdit = this.UIIXGatewayDefaultLocaWindow.UIDeviceDetailWindow.UIDeviceNameWindow.UIDeviceNameEdit;
            WinComboBox uIDeviceTypeComboBox = this.UIIXGatewayDefaultLocaWindow.UIDeviceDetailWindow.UIDeviceTypeIDWindow.UIDeviceTypeComboBox;
            WinEdit uIExternalIDEdit = this.UIIXGatewayDefaultLocaWindow.UIDeviceDetailWindow.UIExternalIDWindow.UIExternalIDEdit;
            WinEdit uIDeviceIPAddressEdit = this.UIIXGatewayDefaultLocaWindow.UIDeviceDetailWindow.UIDeviceIPAddressWindow.UIDeviceIPAddressEdit;
            WinButton uIOKButton = this.UIIXGatewayDefaultLocaWindow.UIDeviceDetailWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UIIXGatewayDefaultLocaWindow.UIDeviceSetupWindow.UICloseWindow.UICloseButton;
            WinMenuItem uIExitMenuItem = this.UIIXGatewayDefaultLocaWindow.UIPlugInHostMenuBar.UIFileMenuItem1.UIExitMenuItem;
            #endregion

            // Double-Click image
            Mouse.DoubleClick(uIItemImage, new Point(15, 6));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(17, 7));

            // Click 'Area' -> 'iSense' -> 'Setup' -> 'Devices' menu item
            Mouse.Click(uIDevicesMenuItem, new Point(55, 13));

            // Click '&New' button
            Mouse.Click(uINewButton, new Point(45, 11));

            // Type 'FP 1' in 'DeviceName' text box
            uIDeviceNameEdit.Text = this.DeviceNameParams.UIDeviceNameEditText;

            // Select 'EPP 3.0 (US/Dollars)' in 'Device Type' combo box
            uIDeviceTypeComboBox.SelectedItem = this.DeviceNameParams.UIDeviceTypeComboBoxSelectedItem;

            // Type '2' in 'ExternalID' text box
            uIExternalIDEdit.Text = this.DeviceNameParams.UIExternalIDEditText;

            // Type '192.168.1.1' in 'DeviceIPAddress' text box
            uIDeviceIPAddressEdit.Text = this.DeviceNameParams.UIDeviceIPAddressEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 11));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(31, 7));
        }
        
        #region Properties
        public virtual DeviceNameParams DeviceNameParams
        {
            get
            {
                if ((this.mDeviceNameParams == null))
                {
                    this.mDeviceNameParams = new DeviceNameParams();
                }
                return this.mDeviceNameParams;
            }
        }
        
        public UIBinWindow UIBinWindow
        {
            get
            {
                if ((this.mUIBinWindow == null))
                {
                    this.mUIBinWindow = new UIBinWindow();
                }
                return this.mUIBinWindow;
            }
        }
        
        public UIIXGatewayDefaultLocaWindow UIIXGatewayDefaultLocaWindow
        {
            get
            {
                if ((this.mUIIXGatewayDefaultLocaWindow == null))
                {
                    this.mUIIXGatewayDefaultLocaWindow = new UIIXGatewayDefaultLocaWindow();
                }
                return this.mUIIXGatewayDefaultLocaWindow;
            }
        }
        #endregion
        
        #region Fields
        private DeviceNameParams mDeviceNameParams;
        
        private UIBinWindow mUIBinWindow;
        
        private UIIXGatewayDefaultLocaWindow mUIIXGatewayDefaultLocaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeviceName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class DeviceNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'FP 1' in 'DeviceName' text box
        /// </summary>
        public string UIDeviceNameEditText = "FP 1";
        
        /// <summary>
        /// Select 'EPP 3.0 (US/Dollars)' in 'Device Type' combo box
        /// </summary>
        public string UIDeviceTypeComboBoxSelectedItem = "EPP 3.0 (US/Dollars)";
        
        /// <summary>
        /// Type '2' in 'ExternalID' text box
        /// </summary>
        public string UIExternalIDEditText = "2";
        
        /// <summary>
        /// Type '192.168.1.1' in 'DeviceIPAddress' text box
        /// </summary>
        public string UIDeviceIPAddressEditText = "192.168.1.1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIBinWindow : WinWindow
    {
        
        public UIBinWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "bin";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UINMCexeListItem UINMCexeListItem
        {
            get
            {
                if ((this.mUINMCexeListItem == null))
                {
                    this.mUINMCexeListItem = new UINMCexeListItem(this);
                }
                return this.mUINMCexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UINMCexeListItem mUINMCexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UINMCexeListItem : WinListItem
    {
        
        public UINMCexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "NMC.exe";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIIXGatewayDefaultLocaWindow : WinWindow
    {
        
        public UIIXGatewayDefaultLocaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "iX Gateway - Default Location";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("iX Gateway - Default Location");
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Setup]");
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
            #endregion
        }
        
        #region Properties
        public UIPlugInHostMenuBar UIPlugInHostMenuBar
        {
            get
            {
                if ((this.mUIPlugInHostMenuBar == null))
                {
                    this.mUIPlugInHostMenuBar = new UIPlugInHostMenuBar(this);
                }
                return this.mUIPlugInHostMenuBar;
            }
        }
        
        public UIDeviceSetupWindow UIDeviceSetupWindow
        {
            get
            {
                if ((this.mUIDeviceSetupWindow == null))
                {
                    this.mUIDeviceSetupWindow = new UIDeviceSetupWindow(this);
                }
                return this.mUIDeviceSetupWindow;
            }
        }
        
        public UIDeviceDetailWindow UIDeviceDetailWindow
        {
            get
            {
                if ((this.mUIDeviceDetailWindow == null))
                {
                    this.mUIDeviceDetailWindow = new UIDeviceDetailWindow(this);
                }
                return this.mUIDeviceDetailWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPlugInHostMenuBar mUIPlugInHostMenuBar;
        
        private UIDeviceSetupWindow mUIDeviceSetupWindow;
        
        private UIDeviceDetailWindow mUIDeviceDetailWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIPlugInHostMenuBar : WinMenuBar
    {
        
        public UIPlugInHostMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("iX Gateway - Default Location");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("iX Gateway - Default Location");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIAreaMenuItem UIAreaMenuItem
        {
            get
            {
                if ((this.mUIAreaMenuItem == null))
                {
                    this.mUIAreaMenuItem = new UIAreaMenuItem(this);
                }
                return this.mUIAreaMenuItem;
            }
        }
        
        public UIFileMenuItem1 UIFileMenuItem1
        {
            get
            {
                if ((this.mUIFileMenuItem1 == null))
                {
                    this.mUIFileMenuItem1 = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem1;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFileMenuItem;
        
        private UIAreaMenuItem mUIAreaMenuItem;
        
        private UIFileMenuItem1 mUIFileMenuItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIAreaMenuItem : WinMenuItem
    {
        
        public UIAreaMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Area";
            this.WindowTitles.Add("iX Gateway - Default Location");
            #endregion
        }
        
        #region Properties
        public UIISenseMenuItem UIISenseMenuItem
        {
            get
            {
                if ((this.mUIISenseMenuItem == null))
                {
                    this.mUIISenseMenuItem = new UIISenseMenuItem(this);
                }
                return this.mUIISenseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIISenseMenuItem mUIISenseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIISenseMenuItem : WinMenuItem
    {
        
        public UIISenseMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "iSense";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("iX Gateway - Default Location");
            #endregion
        }
        
        #region Properties
        public UISetupMenuItem UISetupMenuItem
        {
            get
            {
                if ((this.mUISetupMenuItem == null))
                {
                    this.mUISetupMenuItem = new UISetupMenuItem(this);
                }
                return this.mUISetupMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISetupMenuItem mUISetupMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UISetupMenuItem : WinMenuItem
    {
        
        public UISetupMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Setup";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("iX Gateway - Default Location");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDevicesMenuItem
        {
            get
            {
                if ((this.mUIDevicesMenuItem == null))
                {
                    this.mUIDevicesMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDevicesMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Devices";
                    this.mUIDevicesMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDevicesMenuItem.WindowTitles.Add("iX Gateway - Default Location");
                    #endregion
                }
                return this.mUIDevicesMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDevicesMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("iX Gateway - Default Location");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("iX Gateway - Default Location");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIDeviceSetupWindow : WinWindow
    {
        
        public UIDeviceSetupWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fDeviceList";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Setup]");
            #endregion
        }
        
        #region Properties
        public UINewWindow UINewWindow
        {
            get
            {
                if ((this.mUINewWindow == null))
                {
                    this.mUINewWindow = new UINewWindow(this);
                }
                return this.mUINewWindow;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINewWindow mUINewWindow;
        
        private UICloseWindow mUICloseWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UINewWindow : WinWindow
    {
        
        public UINewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnNew";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Setup]");
            #endregion
        }
        
        #region Properties
        public WinButton UINewButton
        {
            get
            {
                if ((this.mUINewButton == null))
                {
                    this.mUINewButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINewButton.SearchProperties[WinButton.PropertyNames.Name] = "New";
                    this.mUINewButton.WindowTitles.Add("iX Gateway - Default Location - [Device Setup]");
                    #endregion
                }
                return this.mUINewButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINewButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClose";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Setup]");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("iX Gateway - Default Location - [Device Setup]");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIDeviceDetailWindow : WinWindow
    {
        
        public UIDeviceDetailWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fDeviceDetail";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
            #endregion
        }
        
        #region Properties
        public UIDeviceNameWindow UIDeviceNameWindow
        {
            get
            {
                if ((this.mUIDeviceNameWindow == null))
                {
                    this.mUIDeviceNameWindow = new UIDeviceNameWindow(this);
                }
                return this.mUIDeviceNameWindow;
            }
        }
        
        public UIDeviceTypeIDWindow UIDeviceTypeIDWindow
        {
            get
            {
                if ((this.mUIDeviceTypeIDWindow == null))
                {
                    this.mUIDeviceTypeIDWindow = new UIDeviceTypeIDWindow(this);
                }
                return this.mUIDeviceTypeIDWindow;
            }
        }
        
        public UIExternalIDWindow UIExternalIDWindow
        {
            get
            {
                if ((this.mUIExternalIDWindow == null))
                {
                    this.mUIExternalIDWindow = new UIExternalIDWindow(this);
                }
                return this.mUIExternalIDWindow;
            }
        }
        
        public UIDeviceIPAddressWindow UIDeviceIPAddressWindow
        {
            get
            {
                if ((this.mUIDeviceIPAddressWindow == null))
                {
                    this.mUIDeviceIPAddressWindow = new UIDeviceIPAddressWindow(this);
                }
                return this.mUIDeviceIPAddressWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDeviceNameWindow mUIDeviceNameWindow;
        
        private UIDeviceTypeIDWindow mUIDeviceTypeIDWindow;
        
        private UIExternalIDWindow mUIExternalIDWindow;
        
        private UIDeviceIPAddressWindow mUIDeviceIPAddressWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIDeviceNameWindow : WinWindow
    {
        
        public UIDeviceNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DeviceName";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
            #endregion
        }
        
        #region Properties
        public WinEdit UIDeviceNameEdit
        {
            get
            {
                if ((this.mUIDeviceNameEdit == null))
                {
                    this.mUIDeviceNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDeviceNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Device Name";
                    this.mUIDeviceNameEdit.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
                    #endregion
                }
                return this.mUIDeviceNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIDeviceNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIDeviceTypeIDWindow : WinWindow
    {
        
        public UIDeviceTypeIDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DeviceTypeID";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIDeviceTypeComboBox
        {
            get
            {
                if ((this.mUIDeviceTypeComboBox == null))
                {
                    this.mUIDeviceTypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIDeviceTypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Device Type";
                    this.mUIDeviceTypeComboBox.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
                    #endregion
                }
                return this.mUIDeviceTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIDeviceTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIExternalIDWindow : WinWindow
    {
        
        public UIExternalIDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ExternalID";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
            #endregion
        }
        
        #region Properties
        public WinEdit UIExternalIDEdit
        {
            get
            {
                if ((this.mUIExternalIDEdit == null))
                {
                    this.mUIExternalIDEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIExternalIDEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Data ID";
                    this.mUIExternalIDEdit.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
                    #endregion
                }
                return this.mUIExternalIDEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIExternalIDEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIDeviceIPAddressWindow : WinWindow
    {
        
        public UIDeviceIPAddressWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DeviceIPAddress";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
            #endregion
        }
        
        #region Properties
        public WinEdit UIDeviceIPAddressEdit
        {
            get
            {
                if ((this.mUIDeviceIPAddressEdit == null))
                {
                    this.mUIDeviceIPAddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDeviceIPAddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "IP Address";
                    this.mUIDeviceIPAddressEdit.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
                    #endregion
                }
                return this.mUIDeviceIPAddressEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIDeviceIPAddressEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("iX Gateway - Default Location - [Device Detail]");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
